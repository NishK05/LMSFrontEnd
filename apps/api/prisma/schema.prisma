// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(STUDENT)
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  courses     Course[]     @relation("InstructorCourses")
  enrollments Enrollment[]
  progress    Progress[]
  files       File[]
  posts       DiscussionPost[]
  replies     DiscussionReply[]
  assignedCourses DiscussionCollaborator[] @relation("AssignedCourses")
  assignedBy DiscussionCollaborator[] @relation("AssignedBy")
  createdTags DiscussionTag[] @relation("CreatedTags")
  grades      Grade[]

  @@map("users")
}

model Course {
  id           String   @id @default(cuid())
  title        String
  description  String
  slug         String   @unique
  image        String?
  instructorId String
  isPublished  Boolean  @default(false)
  isFree       Boolean  @default(false)
  price        Float?
  latePenalty  Float? // % penalty for late submissions (e.g., 10 for 10%)
  gradeSections GradeSection[]
  assignments   Assignment[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  instructor  User         @relation("InstructorCourses", fields: [instructorId], references: [id])
  lessons     Lesson[]
  enrollments Enrollment[]
  files       File[]   @relation("CourseFiles")
  folders     Folder[] @relation("CourseFolders")
  tags        DiscussionTag[]
  posts       DiscussionPost[]
  collaborators DiscussionCollaborator[]

  @@map("courses")
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String
  courseId    String
  order       Int
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course   Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress Progress[]

  @@map("lessons")
}

model Enrollment {
  id         String    @id @default(cuid())
  userId     String
  courseId   String
  progress   Float     @default(0)
  completedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  role       EnrollmentRole

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("enrollments")
}

model Progress {
  id          String    @id @default(cuid())
  userId      String
  lessonId    String
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("progress")
}

model Assignment {
  id            String   @id @default(cuid())
  courseId      String
  sectionId     String
  name          String
  description   String?
  dueDate       DateTime
  type          AssignmentType @default(STANDARD)
  maxScore      Float   @default(100)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  course        Course   @relation(fields: [courseId], references: [id])
  section       GradeSection @relation(fields: [sectionId], references: [id])
  grades        Grade[]
}

model File {
  id          String   @id @default(cuid())
  filename    String
  path        String
  size        Int
  mimetype    String
  uploadedBy  String
  uploadedAt  DateTime @default(now())
  protect     Boolean  @default(false)
  originalPath String?
  protectedPath String?
  // Relations
  uploader    User     @relation(fields: [uploadedBy], references: [id])
  courses     Course[] @relation("CourseFiles")
  folderId    String?
  folder      Folder?  @relation(fields: [folderId], references: [id])
}

model Folder {
  id          String   @id @default(cuid())
  name        String
  path        String   @unique
  createdAt   DateTime @default(now())
  parentId    String?
  parent      Folder?  @relation("FolderParent", fields: [parentId], references: [id])
  children    Folder[] @relation("FolderParent")
  files       File[]
  courses     Course[] @relation("CourseFolders")
}

model DiscussionTag {
  id          String   @id @default(cuid())
  courseId    String
  name        String
  createdById String
  createdAt   DateTime @default(now())

  course      Course   @relation(fields: [courseId], references: [id])
  createdBy   User     @relation("CreatedTags", fields: [createdById], references: [id])
  posts       DiscussionPost[]
}

model DiscussionPost {
  id            String   @id @default(cuid())
  courseId      String
  authorId      String
  title         String
  body          String
  type          String   // "QUESTION" | "POST"
  tagId         String
  privacy       String   // "PUBLIC" | "PRIVATE" | "ANONYMOUS"
  isPinned      Boolean  @default(false)
  isResolved    Boolean  @default(false)
  isDeleted     Boolean  @default(false)
  uniqueCode    String   @unique
  attachmentUrl String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  course        Course         @relation(fields: [courseId], references: [id])
  author        User           @relation(fields: [authorId], references: [id])
  tag           DiscussionTag  @relation(fields: [tagId], references: [id])
  replies       DiscussionReply[]
}

model DiscussionReply {
  id            String   @id @default(cuid())
  postId        String
  parentReplyId String?
  authorId      String
  body          String
  privacy       String   // "PUBLIC" | "PRIVATE" | "ANONYMOUS"
  isEndorsed    Boolean  @default(false)
  isDeleted     Boolean  @default(false)
  uniqueCode    String   @unique
  attachmentUrl String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  post          DiscussionPost   @relation(fields: [postId], references: [id])
  parentReply   DiscussionReply? @relation("ParentReply", fields: [parentReplyId], references: [id])
  author        User             @relation(fields: [authorId], references: [id])
  replies       DiscussionReply[] @relation("ParentReply")
}

model DiscussionCollaborator {
  id           String   @id @default(cuid())
  userId       String
  courseId     String
  assignedById String
  createdAt    DateTime @default(now())

  user         User     @relation("AssignedCourses", fields: [userId], references: [id])
  course       Course   @relation(fields: [courseId], references: [id])
  assignedBy   User     @relation("AssignedBy", fields: [assignedById], references: [id])
}

model GradeSection {
  id        String   @id @default(cuid())
  courseId  String
  name      String
  weight    Float   // % of total grade (0-100)
  order     Int     // for UI ordering
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course    Course   @relation(fields: [courseId], references: [id])
  assignments Assignment[]
}

model Grade {
  id            String   @id @default(cuid())
  assignmentId  String
  studentId     String
  score         Float
  submittedAt   DateTime?
  status        String   // "ON_TIME" | "LATE"
  comment       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  assignment    Assignment @relation(fields: [assignmentId], references: [id])
  student       User       @relation(fields: [studentId], references: [id])
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

enum EnrollmentRole {
  STUDENT
  TEACHER
}

enum AssignmentType {
  STANDARD
  EXTRA_CREDIT
} 