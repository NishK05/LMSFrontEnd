// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(STUDENT)
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  courses     Course[]     @relation("InstructorCourses")
  enrollments Enrollment[]
  progress    Progress[]
  files       File[]

  @@map("users")
}

model Course {
  id           String   @id @default(cuid())
  title        String
  description  String
  slug         String   @unique
  image        String?
  instructorId String
  isPublished  Boolean  @default(false)
  isFree       Boolean  @default(false)
  price        Float?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  instructor  User         @relation("InstructorCourses", fields: [instructorId], references: [id])
  lessons     Lesson[]
  enrollments Enrollment[]
  assignments Assignment[]
  files       File[]   @relation("CourseFiles")
  folders     Folder[] @relation("CourseFolders")

  @@map("courses")
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String
  courseId    String
  order       Int
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course   Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress Progress[]

  @@map("lessons")
}

model Enrollment {
  id         String    @id @default(cuid())
  userId     String
  courseId   String
  progress   Float     @default(0)
  completedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  role       EnrollmentRole

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("enrollments")
}

model Progress {
  id          String    @id @default(cuid())
  userId      String
  lessonId    String
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("progress")
}

model Assignment {
  id          String   @id @default(cuid())
  courseId    String
  title       String
  description String
  dueDate     DateTime
  course      Course   @relation(fields: [courseId], references: [id])
}

model File {
  id          String   @id @default(cuid())
  filename    String
  path        String
  size        Int
  mimetype    String
  uploadedBy  String
  uploadedAt  DateTime @default(now())
  protect     Boolean  @default(false)
  originalPath String?
  protectedPath String?
  // Relations
  uploader    User     @relation(fields: [uploadedBy], references: [id])
  courses     Course[] @relation("CourseFiles")
  folderId    String?
  folder      Folder?  @relation(fields: [folderId], references: [id])
}

model Folder {
  id          String   @id @default(cuid())
  name        String
  path        String   @unique
  createdAt   DateTime @default(now())
  parentId    String?
  parent      Folder?  @relation("FolderParent", fields: [parentId], references: [id])
  children    Folder[] @relation("FolderParent")
  files       File[]
  courses     Course[] @relation("CourseFolders")
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

enum EnrollmentRole {
  STUDENT
  TEACHER
} 